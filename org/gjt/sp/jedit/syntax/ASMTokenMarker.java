/*
 * Decompiled with CFR 0_102.
 */
package org.gjt.sp.jedit.syntax;

import javax.swing.text.Segment;
import org.gjt.sp.jedit.syntax.KeywordMap;
import org.gjt.sp.jedit.syntax.TokenMarker;

public class ASMTokenMarker
extends TokenMarker {
    private static KeywordMap asmKeywords;
    private KeywordMap keywords = ASMTokenMarker.getKeywords();
    private int lastOffset;
    private int lastKeyword;

    public byte markTokensImpl(byte by, Segment segment, int n) {
        int n2;
        char[] arrc = segment.array;
        this.lastOffset = n2 = segment.offset;
        this.lastKeyword = n2;
        int n3 = segment.count + n2;
        block14 : for (int i = n2; i < n3; ++i) {
            int n4 = i + 1;
            char c = arrc[i];
            switch (by) {
                case 0: {
                    switch (c) {
                        case ';': {
                            this.addToken(i - this.lastOffset, by);
                            this.addToken(n3 - i, 1);
                            by = 0;
                            this.lastOffset = this.lastKeyword = n3;
                            break block14;
                        }
                        case '\"': {
                            this.doKeyword(segment, i, c);
                            this.addToken(i - this.lastOffset, by);
                            by = (byte)3;
                            this.lastOffset = this.lastKeyword = i;
                            continue block14;
                        }
                        case '\'': {
                            this.doKeyword(segment, i, c);
                            this.addToken(i - this.lastOffset, by);
                            by = (byte)4;
                            this.lastOffset = this.lastKeyword = i;
                            continue block14;
                        }
                        case ' ': {
                            this.doKeyword(segment, i, c);
                        }
                    }
                    continue block14;
                }
                case 3: {
                    if (c != '\"') continue block14;
                    this.addToken(n4 - this.lastOffset, by);
                    by = 0;
                    this.lastOffset = this.lastKeyword = n4;
                    continue block14;
                }
                case 4: {
                    if (c != '\'') continue block14;
                    this.addToken(n4 - this.lastOffset, 3);
                    by = 0;
                    this.lastOffset = this.lastKeyword = n4;
                    continue block14;
                }
                default: {
                    throw new InternalError("Invalid state: " + by);
                }
            }
        }
        if (by == 0) {
            this.doKeyword(segment, n3, '\u0000');
        }
        switch (by) {
            case 3: 
            case 4: {
                this.addToken(n3 - this.lastOffset, 10);
                by = 0;
                break;
            }
            default: {
                this.addToken(n3 - this.lastOffset, by);
            }
        }
        return by;
    }

    public static KeywordMap getKeywords() {
        if (asmKeywords == null) {
            asmKeywords = new KeywordMap(true);
            asmKeywords.add(".186", 6);
            asmKeywords.add(".286", 6);
            asmKeywords.add(".286P", 6);
            asmKeywords.add(".287", 6);
            asmKeywords.add(".386", 6);
            asmKeywords.add(".386P", 6);
            asmKeywords.add(".387", 6);
            asmKeywords.add(".486", 6);
            asmKeywords.add(".486P", 6);
            asmKeywords.add(".586", 6);
            asmKeywords.add(".586P", 6);
            asmKeywords.add(".686", 6);
            asmKeywords.add(".686P", 6);
            asmKeywords.add(".8086", 6);
            asmKeywords.add(".8087", 6);
            asmKeywords.add(".ALPHA", 6);
            asmKeywords.add(".BREAK", 6);
            asmKeywords.add(".BSS", 6);
            asmKeywords.add(".CODE", 6);
            asmKeywords.add(".CONST", 6);
            asmKeywords.add(".CONTINUE", 6);
            asmKeywords.add(".CREF", 6);
            asmKeywords.add(".DATA", 6);
            asmKeywords.add(".DATA?", 6);
            asmKeywords.add(".DOSSEG", 6);
            asmKeywords.add(".ELSE", 6);
            asmKeywords.add(".ELSEIF", 6);
            asmKeywords.add(".ENDIF", 6);
            asmKeywords.add(".ENDW", 6);
            asmKeywords.add(".ERR", 6);
            asmKeywords.add(".ERR1", 6);
            asmKeywords.add(".ERR2", 6);
            asmKeywords.add(".ERRB", 6);
            asmKeywords.add(".ERRDEF", 6);
            asmKeywords.add(".ERRDIF", 6);
            asmKeywords.add(".ERRDIFI", 6);
            asmKeywords.add(".ERRE", 6);
            asmKeywords.add(".ERRIDN", 6);
            asmKeywords.add(".ERRIDNI", 6);
            asmKeywords.add(".ERRNB", 6);
            asmKeywords.add(".ERRNDEF", 6);
            asmKeywords.add(".ERRNZ", 6);
            asmKeywords.add(".EXIT", 6);
            asmKeywords.add(".FARDATA", 6);
            asmKeywords.add(".FARDATA?", 6);
            asmKeywords.add(".IF", 6);
            asmKeywords.add(".K3D", 6);
            asmKeywords.add(".LALL", 6);
            asmKeywords.add(".LFCOND", 6);
            asmKeywords.add(".LIST", 6);
            asmKeywords.add(".LISTALL", 6);
            asmKeywords.add(".LISTIF", 6);
            asmKeywords.add(".LISTMACRO", 6);
            asmKeywords.add(".LISTMACROALL", 6);
            asmKeywords.add(".MMX", 6);
            asmKeywords.add(".MODEL", 6);
            asmKeywords.add(".MSFLOAT", 6);
            asmKeywords.add(".NO87", 6);
            asmKeywords.add(".NOCREF", 6);
            asmKeywords.add(".NOLIST", 6);
            asmKeywords.add(".NOLISTIF", 6);
            asmKeywords.add(".NOLISTMACRO", 6);
            asmKeywords.add(".RADIX", 6);
            asmKeywords.add(".REPEAT", 6);
            asmKeywords.add(".SALL", 6);
            asmKeywords.add(".SEQ", 6);
            asmKeywords.add(".SFCOND", 6);
            asmKeywords.add(".STACK", 6);
            asmKeywords.add(".STARTUP", 6);
            asmKeywords.add(".TEXT", 6);
            asmKeywords.add(".TFCOND", 6);
            asmKeywords.add(".UNTIL", 6);
            asmKeywords.add(".UNTILCXZ", 6);
            asmKeywords.add(".WHILE", 6);
            asmKeywords.add(".XALL", 6);
            asmKeywords.add(".XCREF", 6);
            asmKeywords.add(".XLIST", 6);
            asmKeywords.add(".XMM", 6);
            asmKeywords.add("__FILE__", 6);
            asmKeywords.add("__LINE__", 6);
            asmKeywords.add("A16", 6);
            asmKeywords.add("A32", 6);
            asmKeywords.add("ADDR", 6);
            asmKeywords.add("ALIGN", 6);
            asmKeywords.add("ALIGNB", 6);
            asmKeywords.add("ASSUME", 6);
            asmKeywords.add("BITS", 6);
            asmKeywords.add("CARRY?", 6);
            asmKeywords.add("CATSTR", 6);
            asmKeywords.add("CODESEG", 6);
            asmKeywords.add("COMM", 6);
            asmKeywords.add("COMMENT", 6);
            asmKeywords.add("COMMON", 6);
            asmKeywords.add("DATASEG", 6);
            asmKeywords.add("DOSSEG", 6);
            asmKeywords.add("ECHO", 6);
            asmKeywords.add("ELSE", 6);
            asmKeywords.add("ELSEIF", 6);
            asmKeywords.add("ELSEIF1", 6);
            asmKeywords.add("ELSEIF2", 6);
            asmKeywords.add("ELSEIFB", 6);
            asmKeywords.add("ELSEIFDEF", 6);
            asmKeywords.add("ELSEIFE", 6);
            asmKeywords.add("ELSEIFIDN", 6);
            asmKeywords.add("ELSEIFNB", 6);
            asmKeywords.add("ELSEIFNDEF", 6);
            asmKeywords.add("END", 6);
            asmKeywords.add("ENDIF", 6);
            asmKeywords.add("ENDM", 6);
            asmKeywords.add("ENDP", 6);
            asmKeywords.add("ENDS", 6);
            asmKeywords.add("ENDSTRUC", 6);
            asmKeywords.add("EVEN", 6);
            asmKeywords.add("EXITM", 6);
            asmKeywords.add("EXPORT", 6);
            asmKeywords.add("EXTERN", 6);
            asmKeywords.add("EXTERNDEF", 6);
            asmKeywords.add("EXTRN", 6);
            asmKeywords.add("FAR", 6);
            asmKeywords.add("FOR", 6);
            asmKeywords.add("FORC", 6);
            asmKeywords.add("GLOBAL", 6);
            asmKeywords.add("GOTO", 6);
            asmKeywords.add("GROUP", 6);
            asmKeywords.add("HIGH", 6);
            asmKeywords.add("HIGHWORD", 6);
            asmKeywords.add("IEND", 6);
            asmKeywords.add("IF", 6);
            asmKeywords.add("IF1", 6);
            asmKeywords.add("IF2", 6);
            asmKeywords.add("IFB", 6);
            asmKeywords.add("IFDEF", 6);
            asmKeywords.add("IFDIF", 6);
            asmKeywords.add("IFDIFI", 6);
            asmKeywords.add("IFE", 6);
            asmKeywords.add("IFIDN", 6);
            asmKeywords.add("IFIDNI", 6);
            asmKeywords.add("IFNB", 6);
            asmKeywords.add("IFNDEF", 6);
            asmKeywords.add("IMPORT", 6);
            asmKeywords.add("INCBIN", 6);
            asmKeywords.add("INCLUDE", 6);
            asmKeywords.add("INCLUDELIB", 6);
            asmKeywords.add("INSTR", 6);
            asmKeywords.add("INVOKE", 6);
            asmKeywords.add("IRP", 6);
            asmKeywords.add("IRPC", 6);
            asmKeywords.add("ISTRUC", 6);
            asmKeywords.add("LABEL", 6);
            asmKeywords.add("LENGTH", 6);
            asmKeywords.add("LENGTHOF", 6);
            asmKeywords.add("LOCAL", 6);
            asmKeywords.add("LOW", 6);
            asmKeywords.add("LOWWORD", 6);
            asmKeywords.add("LROFFSET", 6);
            asmKeywords.add("MACRO", 6);
            asmKeywords.add("NAME", 6);
            asmKeywords.add("NEAR", 6);
            asmKeywords.add("NOSPLIT", 6);
            asmKeywords.add("O16", 6);
            asmKeywords.add("O32", 6);
            asmKeywords.add("OFFSET", 6);
            asmKeywords.add("OPATTR", 6);
            asmKeywords.add("OPTION", 6);
            asmKeywords.add("ORG", 6);
            asmKeywords.add("OVERFLOW?", 6);
            asmKeywords.add("PAGE", 6);
            asmKeywords.add("PARITY?", 6);
            asmKeywords.add("POPCONTEXT", 6);
            asmKeywords.add("PRIVATE", 6);
            asmKeywords.add("PROC", 6);
            asmKeywords.add("PROTO", 6);
            asmKeywords.add("PTR", 6);
            asmKeywords.add("PUBLIC", 6);
            asmKeywords.add("PURGE", 6);
            asmKeywords.add("PUSHCONTEXT", 6);
            asmKeywords.add("RECORD", 6);
            asmKeywords.add("REPEAT", 6);
            asmKeywords.add("REPT", 6);
            asmKeywords.add("SECTION", 6);
            asmKeywords.add("SEG", 6);
            asmKeywords.add("SEGMENT", 6);
            asmKeywords.add("SHORT", 6);
            asmKeywords.add("SIGN?", 6);
            asmKeywords.add("SIZE", 6);
            asmKeywords.add("SIZEOF", 6);
            asmKeywords.add("SIZESTR", 6);
            asmKeywords.add("STACK", 6);
            asmKeywords.add("STRUC", 6);
            asmKeywords.add("STRUCT", 6);
            asmKeywords.add("SUBSTR", 6);
            asmKeywords.add("SUBTITLE", 6);
            asmKeywords.add("SUBTTL", 6);
            asmKeywords.add("THIS", 6);
            asmKeywords.add("TITLE", 6);
            asmKeywords.add("TYPE", 6);
            asmKeywords.add("TYPEDEF", 6);
            asmKeywords.add("UNION", 6);
            asmKeywords.add("USE16", 6);
            asmKeywords.add("USE32", 6);
            asmKeywords.add("USES", 6);
            asmKeywords.add("WHILE", 6);
            asmKeywords.add("WRT", 6);
            asmKeywords.add("ZERO?", 6);
            asmKeywords.add("DB", 7);
            asmKeywords.add("DW", 7);
            asmKeywords.add("DD", 7);
            asmKeywords.add("DF", 7);
            asmKeywords.add("DQ", 7);
            asmKeywords.add("DT", 7);
            asmKeywords.add("RESB", 7);
            asmKeywords.add("RESW", 7);
            asmKeywords.add("RESD", 7);
            asmKeywords.add("RESQ", 7);
            asmKeywords.add("REST", 7);
            asmKeywords.add("EQU", 7);
            asmKeywords.add("TEXTEQU", 7);
            asmKeywords.add("TIMES", 7);
            asmKeywords.add("DUP", 7);
            asmKeywords.add("BYTE", 7);
            asmKeywords.add("WORD", 7);
            asmKeywords.add("DWORD", 7);
            asmKeywords.add("FWORD", 7);
            asmKeywords.add("QWORD", 7);
            asmKeywords.add("TBYTE", 7);
            asmKeywords.add("SBYTE", 7);
            asmKeywords.add("TWORD", 7);
            asmKeywords.add("SWORD", 7);
            asmKeywords.add("SDWORD", 7);
            asmKeywords.add("REAL4", 7);
            asmKeywords.add("REAL8", 7);
            asmKeywords.add("REAL10", 7);
            asmKeywords.add("AL", 8);
            asmKeywords.add("BL", 8);
            asmKeywords.add("CL", 8);
            asmKeywords.add("DL", 8);
            asmKeywords.add("AH", 8);
            asmKeywords.add("BH", 8);
            asmKeywords.add("CH", 8);
            asmKeywords.add("DH", 8);
            asmKeywords.add("AX", 8);
            asmKeywords.add("BX", 8);
            asmKeywords.add("CX", 8);
            asmKeywords.add("DX", 8);
            asmKeywords.add("SI", 8);
            asmKeywords.add("DI", 8);
            asmKeywords.add("SP", 8);
            asmKeywords.add("BP", 8);
            asmKeywords.add("EAX", 8);
            asmKeywords.add("EBX", 8);
            asmKeywords.add("ECX", 8);
            asmKeywords.add("EDX", 8);
            asmKeywords.add("ESI", 8);
            asmKeywords.add("EDI", 8);
            asmKeywords.add("ESP", 8);
            asmKeywords.add("EBP", 8);
            asmKeywords.add("CS", 8);
            asmKeywords.add("DS", 8);
            asmKeywords.add("SS", 8);
            asmKeywords.add("ES", 8);
            asmKeywords.add("FS", 8);
            asmKeywords.add("GS", 8);
            asmKeywords.add("ST", 8);
            asmKeywords.add("ST0", 8);
            asmKeywords.add("ST1", 8);
            asmKeywords.add("ST2", 8);
            asmKeywords.add("ST3", 8);
            asmKeywords.add("ST4", 8);
            asmKeywords.add("ST5", 8);
            asmKeywords.add("ST6", 8);
            asmKeywords.add("ST7", 8);
            asmKeywords.add("MM0", 8);
            asmKeywords.add("MM1", 8);
            asmKeywords.add("MM2", 8);
            asmKeywords.add("MM3", 8);
            asmKeywords.add("MM4", 8);
            asmKeywords.add("MM5", 8);
            asmKeywords.add("MM6", 8);
            asmKeywords.add("MM7", 8);
            asmKeywords.add("XMM0", 8);
            asmKeywords.add("XMM1", 8);
            asmKeywords.add("XMM2", 8);
            asmKeywords.add("XMM3", 8);
            asmKeywords.add("XMM4", 8);
            asmKeywords.add("XMM5", 8);
            asmKeywords.add("XMM6", 8);
            asmKeywords.add("XMM7", 8);
            asmKeywords.add("CR0", 8);
            asmKeywords.add("CR2", 8);
            asmKeywords.add("CR3", 8);
            asmKeywords.add("CR4", 8);
            asmKeywords.add("DR0", 8);
            asmKeywords.add("DR1", 8);
            asmKeywords.add("DR2", 8);
            asmKeywords.add("DR3", 8);
            asmKeywords.add("DR4", 8);
            asmKeywords.add("DR5", 8);
            asmKeywords.add("DR6", 8);
            asmKeywords.add("DR7", 8);
            asmKeywords.add("TR3", 8);
            asmKeywords.add("TR4", 8);
            asmKeywords.add("TR5", 8);
            asmKeywords.add("TR6", 8);
            asmKeywords.add("TR7", 8);
            asmKeywords.add("AAA", 4);
            asmKeywords.add("AAD", 4);
            asmKeywords.add("AAM", 4);
            asmKeywords.add("AAS", 4);
            asmKeywords.add("ADC", 4);
            asmKeywords.add("ADD", 4);
            asmKeywords.add("ADDPS", 4);
            asmKeywords.add("ADDSS", 4);
            asmKeywords.add("AND", 4);
            asmKeywords.add("ANDNPS", 4);
            asmKeywords.add("ANDPS", 4);
            asmKeywords.add("ARPL", 4);
            asmKeywords.add("BOUND", 4);
            asmKeywords.add("BSF", 4);
            asmKeywords.add("BSR", 4);
            asmKeywords.add("BSWAP", 4);
            asmKeywords.add("BT", 4);
            asmKeywords.add("BTC", 4);
            asmKeywords.add("BTR", 4);
            asmKeywords.add("BTS", 4);
            asmKeywords.add("CALL", 4);
            asmKeywords.add("CBW", 4);
            asmKeywords.add("CDQ", 4);
            asmKeywords.add("CLC", 4);
            asmKeywords.add("CLD", 4);
            asmKeywords.add("CLI", 4);
            asmKeywords.add("CLTS", 4);
            asmKeywords.add("CMC", 4);
            asmKeywords.add("CMOVA", 4);
            asmKeywords.add("CMOVAE", 4);
            asmKeywords.add("CMOVB", 4);
            asmKeywords.add("CMOVBE", 4);
            asmKeywords.add("CMOVC", 4);
            asmKeywords.add("CMOVE", 4);
            asmKeywords.add("CMOVG", 4);
            asmKeywords.add("CMOVGE", 4);
            asmKeywords.add("CMOVL", 4);
            asmKeywords.add("CMOVLE", 4);
            asmKeywords.add("CMOVNA", 4);
            asmKeywords.add("CMOVNAE", 4);
            asmKeywords.add("CMOVNB", 4);
            asmKeywords.add("CMOVNBE", 4);
            asmKeywords.add("CMOVNC", 4);
            asmKeywords.add("CMOVNE", 4);
            asmKeywords.add("CMOVNG", 4);
            asmKeywords.add("CMOVNGE", 4);
            asmKeywords.add("CMOVNL", 4);
            asmKeywords.add("CMOVNLE", 4);
            asmKeywords.add("CMOVNO", 4);
            asmKeywords.add("CMOVNP", 4);
            asmKeywords.add("CMOVNS", 4);
            asmKeywords.add("CMOVNZ", 4);
            asmKeywords.add("CMOVO", 4);
            asmKeywords.add("CMOVP", 4);
            asmKeywords.add("CMOVPE", 4);
            asmKeywords.add("CMOVPO", 4);
            asmKeywords.add("CMOVS", 4);
            asmKeywords.add("CMOVZ", 4);
            asmKeywords.add("CMP", 4);
            asmKeywords.add("CMPPS", 4);
            asmKeywords.add("CMPS", 4);
            asmKeywords.add("CMPSB", 4);
            asmKeywords.add("CMPSD", 4);
            asmKeywords.add("CMPSS", 4);
            asmKeywords.add("CMPSW", 4);
            asmKeywords.add("CMPXCHG", 4);
            asmKeywords.add("CMPXCHGB", 4);
            asmKeywords.add("COMISS", 4);
            asmKeywords.add("CPUID", 4);
            asmKeywords.add("CWD", 4);
            asmKeywords.add("CWDE", 4);
            asmKeywords.add("CVTPI2PS", 4);
            asmKeywords.add("CVTPS2PI", 4);
            asmKeywords.add("CVTSI2SS", 4);
            asmKeywords.add("CVTSS2SI", 4);
            asmKeywords.add("CVTTPS2PI", 4);
            asmKeywords.add("CVTTSS2SI", 4);
            asmKeywords.add("DAA", 4);
            asmKeywords.add("DAS", 4);
            asmKeywords.add("DEC", 4);
            asmKeywords.add("DIV", 4);
            asmKeywords.add("DIVPS", 4);
            asmKeywords.add("DIVSS", 4);
            asmKeywords.add("EMMS", 4);
            asmKeywords.add("ENTER", 4);
            asmKeywords.add("F2XM1", 4);
            asmKeywords.add("FABS", 4);
            asmKeywords.add("FADD", 4);
            asmKeywords.add("FADDP", 4);
            asmKeywords.add("FBLD", 4);
            asmKeywords.add("FBSTP", 4);
            asmKeywords.add("FCHS", 4);
            asmKeywords.add("FCLEX", 4);
            asmKeywords.add("FCMOVB", 4);
            asmKeywords.add("FCMOVBE", 4);
            asmKeywords.add("FCMOVE", 4);
            asmKeywords.add("FCMOVNB", 4);
            asmKeywords.add("FCMOVNBE", 4);
            asmKeywords.add("FCMOVNE", 4);
            asmKeywords.add("FCMOVNU", 4);
            asmKeywords.add("FCMOVU", 4);
            asmKeywords.add("FCOM", 4);
            asmKeywords.add("FCOMI", 4);
            asmKeywords.add("FCOMIP", 4);
            asmKeywords.add("FCOMP", 4);
            asmKeywords.add("FCOMPP", 4);
            asmKeywords.add("FCOS", 4);
            asmKeywords.add("FDECSTP", 4);
            asmKeywords.add("FDIV", 4);
            asmKeywords.add("FDIVP", 4);
            asmKeywords.add("FDIVR", 4);
            asmKeywords.add("FDIVRP", 4);
            asmKeywords.add("FFREE", 4);
            asmKeywords.add("FIADD", 4);
            asmKeywords.add("FICOM", 4);
            asmKeywords.add("FICOMP", 4);
            asmKeywords.add("FIDIV", 4);
            asmKeywords.add("FIDIVR", 4);
            asmKeywords.add("FILD", 4);
            asmKeywords.add("FIMUL", 4);
            asmKeywords.add("FINCSTP", 4);
            asmKeywords.add("FINIT", 4);
            asmKeywords.add("FIST", 4);
            asmKeywords.add("FISTP", 4);
            asmKeywords.add("FISUB", 4);
            asmKeywords.add("FISUBR", 4);
            asmKeywords.add("FLD1", 4);
            asmKeywords.add("FLDCW", 4);
            asmKeywords.add("FLDENV", 4);
            asmKeywords.add("FLDL2E", 4);
            asmKeywords.add("FLDL2T", 4);
            asmKeywords.add("FLDLG2", 4);
            asmKeywords.add("FLDLN2", 4);
            asmKeywords.add("FLDPI", 4);
            asmKeywords.add("FLDZ", 4);
            asmKeywords.add("FMUL", 4);
            asmKeywords.add("FMULP", 4);
            asmKeywords.add("FNCLEX", 4);
            asmKeywords.add("FNINIT", 4);
            asmKeywords.add("FNOP", 4);
            asmKeywords.add("FNSAVE", 4);
            asmKeywords.add("FNSTCW", 4);
            asmKeywords.add("FNSTENV", 4);
            asmKeywords.add("FNSTSW", 4);
            asmKeywords.add("FPATAN", 4);
            asmKeywords.add("FPREM", 4);
            asmKeywords.add("FPREMI", 4);
            asmKeywords.add("FPTAN", 4);
            asmKeywords.add("FRNDINT", 4);
            asmKeywords.add("FRSTOR", 4);
            asmKeywords.add("FSAVE", 4);
            asmKeywords.add("FSCALE", 4);
            asmKeywords.add("FSIN", 4);
            asmKeywords.add("FSINCOS", 4);
            asmKeywords.add("FSQRT", 4);
            asmKeywords.add("FST", 4);
            asmKeywords.add("FSTCW", 4);
            asmKeywords.add("FSTENV", 4);
            asmKeywords.add("FSTP", 4);
            asmKeywords.add("FSTSW", 4);
            asmKeywords.add("FSUB", 4);
            asmKeywords.add("FSUBP", 4);
            asmKeywords.add("FSUBR", 4);
            asmKeywords.add("FSUBRP", 4);
            asmKeywords.add("FTST", 4);
            asmKeywords.add("FUCOM", 4);
            asmKeywords.add("FUCOMI", 4);
            asmKeywords.add("FUCOMIP", 4);
            asmKeywords.add("FUCOMP", 4);
            asmKeywords.add("FUCOMPP", 4);
            asmKeywords.add("FWAIT", 4);
            asmKeywords.add("FXAM", 4);
            asmKeywords.add("FXCH", 4);
            asmKeywords.add("FXRSTOR", 4);
            asmKeywords.add("FXSAVE", 4);
            asmKeywords.add("FXTRACT", 4);
            asmKeywords.add("FYL2X", 4);
            asmKeywords.add("FYL2XP1", 4);
            asmKeywords.add("HLT", 4);
            asmKeywords.add("IDIV", 4);
            asmKeywords.add("IMUL", 4);
            asmKeywords.add("IN", 4);
            asmKeywords.add("INC", 4);
            asmKeywords.add("INS", 4);
            asmKeywords.add("INSB", 4);
            asmKeywords.add("INSD", 4);
            asmKeywords.add("INSW", 4);
            asmKeywords.add("INT", 4);
            asmKeywords.add("INTO", 4);
            asmKeywords.add("INVD", 4);
            asmKeywords.add("INVLPG", 4);
            asmKeywords.add("IRET", 4);
            asmKeywords.add("JA", 4);
            asmKeywords.add("JAE", 4);
            asmKeywords.add("JB", 4);
            asmKeywords.add("JBE", 4);
            asmKeywords.add("JC", 4);
            asmKeywords.add("JCXZ", 4);
            asmKeywords.add("JE", 4);
            asmKeywords.add("JECXZ", 4);
            asmKeywords.add("JG", 4);
            asmKeywords.add("JGE", 4);
            asmKeywords.add("JL", 4);
            asmKeywords.add("JLE", 4);
            asmKeywords.add("JMP", 4);
            asmKeywords.add("JNA", 4);
            asmKeywords.add("JNAE", 4);
            asmKeywords.add("JNB", 4);
            asmKeywords.add("JNBE", 4);
            asmKeywords.add("JNC", 4);
            asmKeywords.add("JNE", 4);
            asmKeywords.add("JNG", 4);
            asmKeywords.add("JNGE", 4);
            asmKeywords.add("JNL", 4);
            asmKeywords.add("JNLE", 4);
            asmKeywords.add("JNO", 4);
            asmKeywords.add("JNP", 4);
            asmKeywords.add("JNS", 4);
            asmKeywords.add("JNZ", 4);
            asmKeywords.add("JO", 4);
            asmKeywords.add("JP", 4);
            asmKeywords.add("JPE", 4);
            asmKeywords.add("JPO", 4);
            asmKeywords.add("JS", 4);
            asmKeywords.add("JZ", 4);
            asmKeywords.add("LAHF", 4);
            asmKeywords.add("LAR", 4);
            asmKeywords.add("LDMXCSR", 4);
            asmKeywords.add("LDS", 4);
            asmKeywords.add("LEA", 4);
            asmKeywords.add("LEAVE", 4);
            asmKeywords.add("LES", 4);
            asmKeywords.add("LFS", 4);
            asmKeywords.add("LGDT", 4);
            asmKeywords.add("LGS", 4);
            asmKeywords.add("LIDT", 4);
            asmKeywords.add("LLDT", 4);
            asmKeywords.add("LMSW", 4);
            asmKeywords.add("LOCK", 4);
            asmKeywords.add("LODS", 4);
            asmKeywords.add("LODSB", 4);
            asmKeywords.add("LODSD", 4);
            asmKeywords.add("LODSW", 4);
            asmKeywords.add("LOOP", 4);
            asmKeywords.add("LOOPE", 4);
            asmKeywords.add("LOOPNE", 4);
            asmKeywords.add("LOOPNZ", 4);
            asmKeywords.add("LOOPZ", 4);
            asmKeywords.add("LSL", 4);
            asmKeywords.add("LSS", 4);
            asmKeywords.add("LTR", 4);
            asmKeywords.add("MASKMOVQ", 4);
            asmKeywords.add("MAXPS", 4);
            asmKeywords.add("MAXSS", 4);
            asmKeywords.add("MINPS", 4);
            asmKeywords.add("MINSS", 4);
            asmKeywords.add("MOV", 4);
            asmKeywords.add("MOVAPS", 4);
            asmKeywords.add("MOVD", 4);
            asmKeywords.add("MOVHLPS", 4);
            asmKeywords.add("MOVHPS", 4);
            asmKeywords.add("MOVLHPS", 4);
            asmKeywords.add("MOVLPS", 4);
            asmKeywords.add("MOVMSKPS", 4);
            asmKeywords.add("MOVNTPS", 4);
            asmKeywords.add("MOVNTQ", 4);
            asmKeywords.add("MOVQ", 4);
            asmKeywords.add("MOVS", 4);
            asmKeywords.add("MOVSB", 4);
            asmKeywords.add("MOVSD", 4);
            asmKeywords.add("MOVSS", 4);
            asmKeywords.add("MOVSW", 4);
            asmKeywords.add("MOVSX", 4);
            asmKeywords.add("MOVUPS", 4);
            asmKeywords.add("MOVZX", 4);
            asmKeywords.add("MUL", 4);
            asmKeywords.add("MULPS", 4);
            asmKeywords.add("MULSS", 4);
            asmKeywords.add("NEG", 4);
            asmKeywords.add("NOP", 4);
            asmKeywords.add("NOT", 4);
            asmKeywords.add("OR", 4);
            asmKeywords.add("ORPS", 4);
            asmKeywords.add("OUT", 4);
            asmKeywords.add("OUTS", 4);
            asmKeywords.add("OUTSB", 4);
            asmKeywords.add("OUTSD", 4);
            asmKeywords.add("OUTSW", 4);
            asmKeywords.add("PACKSSDW", 4);
            asmKeywords.add("PACKSSWB", 4);
            asmKeywords.add("PACKUSWB", 4);
            asmKeywords.add("PADDB", 4);
            asmKeywords.add("PADDD", 4);
            asmKeywords.add("PADDSB", 4);
            asmKeywords.add("PADDSW", 4);
            asmKeywords.add("PADDUSB", 4);
            asmKeywords.add("PADDUSW", 4);
            asmKeywords.add("PADDW", 4);
            asmKeywords.add("PAND", 4);
            asmKeywords.add("PANDN", 4);
            asmKeywords.add("PAVGB", 4);
            asmKeywords.add("PAVGW", 4);
            asmKeywords.add("PCMPEQB", 4);
            asmKeywords.add("PCMPEQD", 4);
            asmKeywords.add("PCMPEQW", 4);
            asmKeywords.add("PCMPGTB", 4);
            asmKeywords.add("PCMPGTD", 4);
            asmKeywords.add("PCMPGTW", 4);
            asmKeywords.add("PEXTRW", 4);
            asmKeywords.add("PINSRW", 4);
            asmKeywords.add("PMADDWD", 4);
            asmKeywords.add("PMAXSW", 4);
            asmKeywords.add("PMAXUB", 4);
            asmKeywords.add("PMINSW", 4);
            asmKeywords.add("PMINUB", 4);
            asmKeywords.add("PMOVMSKB", 4);
            asmKeywords.add("PMULHUW", 4);
            asmKeywords.add("PMULHW", 4);
            asmKeywords.add("PMULLW", 4);
            asmKeywords.add("POP", 4);
            asmKeywords.add("POPA", 4);
            asmKeywords.add("POPAD", 4);
            asmKeywords.add("POPAW", 4);
            asmKeywords.add("POPF", 4);
            asmKeywords.add("POPFD", 4);
            asmKeywords.add("POPFW", 4);
            asmKeywords.add("POR", 4);
            asmKeywords.add("PREFETCH", 4);
            asmKeywords.add("PSADBW", 4);
            asmKeywords.add("PSHUFW", 4);
            asmKeywords.add("PSLLD", 4);
            asmKeywords.add("PSLLQ", 4);
            asmKeywords.add("PSLLW", 4);
            asmKeywords.add("PSRAD", 4);
            asmKeywords.add("PSRAW", 4);
            asmKeywords.add("PSRLD", 4);
            asmKeywords.add("PSRLQ", 4);
            asmKeywords.add("PSRLW", 4);
            asmKeywords.add("PSUBB", 4);
            asmKeywords.add("PSUBD", 4);
            asmKeywords.add("PSUBSB", 4);
            asmKeywords.add("PSUBSW", 4);
            asmKeywords.add("PSUBUSB", 4);
            asmKeywords.add("PSUBUSW", 4);
            asmKeywords.add("PSUBW", 4);
            asmKeywords.add("PUNPCKHBW", 4);
            asmKeywords.add("PUNPCKHDQ", 4);
            asmKeywords.add("PUNPCKHWD", 4);
            asmKeywords.add("PUNPCKLBW", 4);
            asmKeywords.add("PUNPCKLDQ", 4);
            asmKeywords.add("PUNPCKLWD", 4);
            asmKeywords.add("PUSH", 4);
            asmKeywords.add("PUSHA", 4);
            asmKeywords.add("PUSHAD", 4);
            asmKeywords.add("PUSHAW", 4);
            asmKeywords.add("PUSHF", 4);
            asmKeywords.add("PUSHFD", 4);
            asmKeywords.add("PUSHFW", 4);
            asmKeywords.add("PXOR", 4);
            asmKeywords.add("RCL", 4);
            asmKeywords.add("RCR", 4);
            asmKeywords.add("RDMSR", 4);
            asmKeywords.add("RDPMC", 4);
            asmKeywords.add("RDTSC", 4);
            asmKeywords.add("REP", 4);
            asmKeywords.add("REPE", 4);
            asmKeywords.add("REPNE", 4);
            asmKeywords.add("REPNZ", 4);
            asmKeywords.add("REPZ", 4);
            asmKeywords.add("RET", 4);
            asmKeywords.add("RETF", 4);
            asmKeywords.add("RETN", 4);
            asmKeywords.add("ROL", 4);
            asmKeywords.add("ROR", 4);
            asmKeywords.add("RSM", 4);
            asmKeywords.add("SAHF", 4);
            asmKeywords.add("SAL", 4);
            asmKeywords.add("SAR", 4);
            asmKeywords.add("SBB", 4);
            asmKeywords.add("SCAS", 4);
            asmKeywords.add("SCASB", 4);
            asmKeywords.add("SCASD", 4);
            asmKeywords.add("SCASW", 4);
            asmKeywords.add("SETA", 4);
            asmKeywords.add("SETAE", 4);
            asmKeywords.add("SETB", 4);
            asmKeywords.add("SETBE", 4);
            asmKeywords.add("SETC", 4);
            asmKeywords.add("SETE", 4);
            asmKeywords.add("SETG", 4);
            asmKeywords.add("SETGE", 4);
            asmKeywords.add("SETL", 4);
            asmKeywords.add("SETLE", 4);
            asmKeywords.add("SETNA", 4);
            asmKeywords.add("SETNAE", 4);
            asmKeywords.add("SETNB", 4);
            asmKeywords.add("SETNBE", 4);
            asmKeywords.add("SETNC", 4);
            asmKeywords.add("SETNE", 4);
            asmKeywords.add("SETNG", 4);
            asmKeywords.add("SETNGE", 4);
            asmKeywords.add("SETNL", 4);
            asmKeywords.add("SETNLE", 4);
            asmKeywords.add("SETNO", 4);
            asmKeywords.add("SETNP", 4);
            asmKeywords.add("SETNS", 4);
            asmKeywords.add("SETNZ", 4);
            asmKeywords.add("SETO", 4);
            asmKeywords.add("SETP", 4);
            asmKeywords.add("SETPE", 4);
            asmKeywords.add("SETPO", 4);
            asmKeywords.add("SETS", 4);
            asmKeywords.add("SETZ", 4);
            asmKeywords.add("SFENCE", 4);
            asmKeywords.add("SGDT", 4);
            asmKeywords.add("SHL", 4);
            asmKeywords.add("SHLD", 4);
            asmKeywords.add("SHR", 4);
            asmKeywords.add("SHRD", 4);
            asmKeywords.add("SHUFPS", 4);
            asmKeywords.add("SIDT", 4);
            asmKeywords.add("SLDT", 4);
            asmKeywords.add("SMSW", 4);
            asmKeywords.add("SQRTPS", 4);
            asmKeywords.add("SQRTSS", 4);
            asmKeywords.add("STC", 4);
            asmKeywords.add("STD", 4);
            asmKeywords.add("STI", 4);
            asmKeywords.add("STMXCSR", 4);
            asmKeywords.add("STOS", 4);
            asmKeywords.add("STOSB", 4);
            asmKeywords.add("STOSD", 4);
            asmKeywords.add("STOSW", 4);
            asmKeywords.add("STR", 4);
            asmKeywords.add("SUB", 4);
            asmKeywords.add("SUBPS", 4);
            asmKeywords.add("SUBSS", 4);
            asmKeywords.add("SYSENTER", 4);
            asmKeywords.add("SYSEXIT", 4);
            asmKeywords.add("TEST", 4);
            asmKeywords.add("UB2", 4);
            asmKeywords.add("UCOMISS", 4);
            asmKeywords.add("UNPCKHPS", 4);
            asmKeywords.add("UNPCKLPS", 4);
            asmKeywords.add("WAIT", 4);
            asmKeywords.add("WBINVD", 4);
            asmKeywords.add("VERR", 4);
            asmKeywords.add("VERW", 4);
            asmKeywords.add("WRMSR", 4);
            asmKeywords.add("XADD", 4);
            asmKeywords.add("XCHG", 4);
            asmKeywords.add("XLAT", 4);
            asmKeywords.add("XLATB", 4);
            asmKeywords.add("XOR", 4);
            asmKeywords.add("XORPS", 4);
            asmKeywords.add("FEMMS", 4);
            asmKeywords.add("PAVGUSB", 4);
            asmKeywords.add("PF2ID", 4);
            asmKeywords.add("PFACC", 4);
            asmKeywords.add("PFADD", 4);
            asmKeywords.add("PFCMPEQ", 4);
            asmKeywords.add("PFCMPGE", 4);
            asmKeywords.add("PFCMPGT", 4);
            asmKeywords.add("PFMAX", 4);
            asmKeywords.add("PFMIN", 4);
            asmKeywords.add("PFMUL", 4);
            asmKeywords.add("PFRCP", 4);
            asmKeywords.add("PFRCPIT1", 4);
            asmKeywords.add("PFRCPIT2", 4);
            asmKeywords.add("PFRSQIT1", 4);
            asmKeywords.add("PFRSQRT", 4);
            asmKeywords.add("PFSUB", 4);
            asmKeywords.add("PFSUBR", 4);
            asmKeywords.add("PI2FD", 4);
            asmKeywords.add("PMULHRW", 4);
            asmKeywords.add("PREFETCHW", 4);
            asmKeywords.add("PF2IW", 4);
            asmKeywords.add("PFNACC", 4);
            asmKeywords.add("PFPNACC", 4);
            asmKeywords.add("PI2FW", 4);
            asmKeywords.add("PSWAPD", 4);
            asmKeywords.add("PREFETCHNTA", 4);
            asmKeywords.add("PREFETCHT0", 4);
            asmKeywords.add("PREFETCHT1", 4);
            asmKeywords.add("PREFETCHT2", 4);
        }
        return asmKeywords;
    }

    private boolean doKeyword(Segment segment, int n, char c) {
        int n2 = n + 1;
        int n3 = n - this.lastKeyword;
        byte by = this.keywords.lookup(segment, this.lastKeyword, n3);
        if (by != 0) {
            if (this.lastKeyword != this.lastOffset) {
                this.addToken(this.lastKeyword - this.lastOffset, 0);
            }
            this.addToken(n3, by);
            this.lastOffset = n;
        }
        this.lastKeyword = n2;
        return false;
    }
}

